import { createContext, useReducer } from 'react';

/* const DUMMY_EXPENSES = [
    {
        id: 'e1',
        description: 'a pair of shoes',
        amount: 59.99,
        date: new Date('2023-04-01'),
    },
    {
        id: 'e2',
        description: 'a pair of pants',
        amount: 89.29,
        date: new Date('2023-01-19'),
    },
    {
        id: 'e3',
        description: 'some bananas',
        amount: 5.99,
        date: new Date('2023-04-02'),
    },
    {
        id: 'e4',
        description: 'a book',
        amount: 14.99,
        date: new Date('2023-04-01'),
    },
    {
        id: 'e5',
        description: 'a book',
        amount: 18.59,
        date: new Date('2023-02-17'),
    },
] */

export const ExpensesContext = createContext({
    expenses: [],
    addExpense: ({description, amount, date}) => {},
    deleteExpense: (id) => {},
    updateExpense: (id, {description, amount, date}) => {},

    setExpenses: (expenses) => {},
});

function expensesReducer(state, action) {
    switch(action.type) {
        case 'ADD': 
            //const id = new Date().toString() + Math.random().toString();
            //return [{ ...action.payload, id: id }, ...state];
            //use id generated by firebase instead:
            return [action.payload, ...state];
        case 'UPDATE':
            const updateableExpenseIndex = state.findIndex(
                (expense) => expense.id === action.payload.id 
            );
            const updateableExpense = state[updateableExpenseIndex];
            const updatedItem = {...updateableExpense, ...action.payload.data};
            const updatedExpenses = [...state];
            updatedExpenses[updateableExpenseIndex] = updatedItem;
            return updatedExpenses;
        case 'DELETE':
            return state.filter((expense) => expense.id !== action.payload);

        case 'SET':
            const inverted = action.payload.reverse();
            return inverted;

        default: 
            return state;
    }
}

function ExpensesContextProvider({children}) {
    const [expensesState, dispatch] = useReducer(expensesReducer, []); //DUMMY_EXPENSES);

    function addExpense(expenseData) {
        dispatch({type: 'ADD', payload: expenseData});
    }
    function deleteExpense(id) {
        dispatch({type: 'DELETE', payload: id});
    }
    function updateExpense(id, expenseData) {
        dispatch({type: 'UPDATE', payload: {id: id, data: expenseData}});
    }

    function setExpenses(expenses) {
        dispatch({type: 'SET', payload: expenses});
    }

    const value = {
        expenses: expensesState, 
        addExpense: addExpense,
        updateExpense: updateExpense,
        deleteExpense: deleteExpense,

        setExpenses: setExpenses,
    };

    return <ExpensesContext.Provider value={value}>{children}</ExpensesContext.Provider>
}

export default ExpensesContextProvider;